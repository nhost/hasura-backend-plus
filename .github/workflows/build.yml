name: Build
on:
  pull_request:
    branches: [v2]
    paths:
      - '**'
      - '!docs/**'
      - '!*.md'
  push:
    branches: [v2]
    paths:
      - '**'
      - '!docs/**'
      - '!*.md'
env:
  HASURA_GRAPHQL_ADMIN_SECRET: test_secret_key
  JWT_ALGORITHM: HS256
  JWT_KEY: never_use_this_secret_key_in_production_this_is_only_for_CI_testing_098hu32r4389ufb4n38994321
  POSTGRES_PASSWORD: postgrespassword
  S3_BUCKET: test-bucket
  S3_ACCESS_KEY_ID: 'minio_access_key'
  S3_SECRET_ACCESS_KEY: 'minio_secret_key'
jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: --restart always --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      graphql-engine:
        image: hasura/graphql-engine:v1.1.0
        env:
          HASURA_GRAPHQL_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
          HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${{ env.POSTGRES_PASSWORD }}@postgres:5432/postgres
          HASURA_GRAPHQL_JWT_SECRET: '{"type": "${{ env.JWT_ALGORITHM }}", "key": "${{ env.JWT_KEY }}"}'
        options: >-
          --restart always
          --health-cmd "printf 'GET /healthz HTTP/1.1\r\nHost: graphql-engine\r\n\n' | nc -z graphql-engine 8080 > /dev/null 2>&1 || exit 1"
          --health-interval 3s
          --health-timeout 5s
          --health-retries 5
      minio:
        image: bitnami/minio:latest
        env:
          MINIO_ACCESS_KEY: ${{ env.S3_ACCESS_KEY_ID }}
          MINIO_SECRET_KEY: ${{ env.S3_SECRET_ACCESS_KEY }}
          MINIO_DEFAULT_BUCKETS: ${{ env.S3_BUCKET }}
        options: --restart always
      mailhog:
        image: mailhog/mailhog
    container:
      image: node:12
      env:
        PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: true
        HASURA_GRAPHQL_ADMIN_SECRET: ${{ env.HASURA_GRAPHQL_ADMIN_SECRET }}
        HASURA_ENDPOINT: http://graphql-engine:8080/v1/graphql
        JWT_ALGORITHM: ${{ env.JWT_ALGORITHM }}
        JWT_KEY: ${{ env.JWT_KEY }}
        S3_ENDPOINT: http://minio:9000
        S3_BUCKET: ${{ env.S3_BUCKET }}
        S3_ACCESS_KEY_ID: ${{ env.S3_ACCESS_KEY_ID }}
        S3_SECRET_ACCESS_KEY: ${{ env.S3_SECRET_ACCESS_KEY }}
        SMTP_HOST: mailhog
        SMTP_PORT: 1025
        SMTP_SECURE: 'false'
        GITHUB_ENABLE: false
        GOOGLE_ENABLE: false
        FACEBOOK_ENABLE: false
        TWITTER_ENABLE: false
        LINKEDIN_ENABLE: false
        APPLE_ENABLE: false
      options: --hostname hasura-backend-plus
    steps:
      - uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install Puppeteer dependencies
        # run: apt-get update && apt-get -y install gconf-service libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxss1 libxtst6 libappindicator1 libnss3 libasound2 libatk1.0-0 libc6 ca-certificates fonts-liberation lsb-release xdg-utils wget
        run: >
          apt-get update 
          && apt-get install -y wget gnupg 
          && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add - 
          && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' 
          && apt-get update 
          && apt-get install -y google-chrome-unstable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf --no-install-recommends 
          && rm -rf /var/lib/apt/lists/*
      - name: Copy test migrations
        run: cp -r test-mocks/migrations/* migrations/
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Cache dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install dependencies
        run: yarn
      - name: Run Jest tests
        run: yarn run test:ci
      - name: Upload test results
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: coverage
  coverage:
    needs: test
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Download coverage results
        uses: actions/download-artifact@v1
        with:
          name: coverage
      - name: Publish to CodeCov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage/clover.xml
  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build and publish to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: nhost/hasura-backend-plus
          tag_with_ref: true
          tag_with_sha: true
